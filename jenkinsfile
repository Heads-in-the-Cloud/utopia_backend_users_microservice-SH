#!groovy
// Users API Microservice Pipeline
pipeline {
    agent any

    environment {
        commit = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()

        org_ecr_uri = '026390315914.dkr.ecr.us-west-2.amazonaws.com'

        repo_name = 'utopia_backend_users_fastapi-sh'
        scanner_home = tool "${SonarQubeScanner}";
    }

    stages {
        stage('aws_login') {
            steps {
                echo 'Getting AWS credentials to push to Org ECR...'
                sh 'aws ecr get-login-password --region ${aws_region} | docker login --username AWS --password-stdin ${org_ecr_uri}'
            }
        }

//         stage('SonarQube Analysis') {
//             steps{
//                 echo 'Beginning SonarQube analysis...'
//                 withSonarQubeEnv(installationName: 'SonarQube') {
//                     sh "${scanner_home}/bin/sonar-scanner"
//                 }
//             }
//         }

        stage('Testing') {
            agent {dockerfile true}
            steps {
                echo 'Running Python unittests...'
                sh 'pytest api_microservice/test_runner.py'
            }
        }

        stage('Build') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t ${repo_name} .'
            }
        }

        stage('Push') {
            steps {
                echo 'Tagging images...'
                sh 'docker tag ${repo_name}:latest ${org_ecr_uri}/${repo_name}:latest'
                sh 'docker tag ${repo_name}:latest ${org_ecr_uri}/${repo_name}:${commit}'
                echo 'Pushing images...'
                sh 'docker push ${org_ecr_uri}/${repo_name}:latest'
                sh 'docker push ${org_ecr_uri}/${repo_name}:${commit}'
            }
        }

        stage('Cleanup') {
            steps {
                echo 'Removing images'
                sh 'docker rmi ${repo_name}:latest'
                sh 'docker rmi ${org_ecr_uri}/${repo_name}:latest'
                sh 'docker rmi ${org_ecr_uri}/${repo_name}:${commit}'
            }
        }
    }
}